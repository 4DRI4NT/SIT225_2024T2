import sys
import traceback
import random
from arduino_iot_cloud import ArduinoCloudClient
import asyncio
import datetime
import csv
from csv import writer

DEVICE_ID = "bdda2196-1343-4b28-8206-275d538294cd"
SECRET_KEY = "wRiTRVEIXjE9jb@XbDPy29k2w"

# Default values
x_value = 'c'
y_value = 'c'
z_value = 'c'


def write_terminal_and_csv(value, axis):
    # Fetch old values
    global x_value
    global y_value
    global z_value

    if ((axis == 'x') and (x_value == 'c')):
        x_value = value
    elif ((axis == 'y') and (y_value == 'c')):
        y_value = value
    elif ((axis == 'z') and (z_value == 'c')):
        z_value = value

    if ((x_value != 'c') and (y_value != 'c') and (z_value != 'c')):
        date = datetime.datetime.now()
        formatDate = str(date.year) + str(date.month) + str(date.day) + str(date.hour) + str(date.minute) + str(date.second)
        print(f"{formatDate}, {x_value}, {y_value}, {z_value}")

        with open('data.csv', 'a', newline='') as csvfile:
            filewriter = writer(csvfile)
            filewriter.writerow([formatDate, x_value, y_value, z_value])

        x_value = 'c'
        y_value = 'c'
        z_value = 'c'

def on_x_value_changed(client, value):
    write_terminal_and_csv(value, 'x')

def on_y_value_changed(client, value):
    write_terminal_and_csv(value, 'y')

def on_z_value_changed(client, value):
    write_terminal_and_csv(value, 'z')


def main():
    # Instantiate Arduino cloud client
    client = ArduinoCloudClient(
        device_id=DEVICE_ID, username=DEVICE_ID, password=SECRET_KEY
    )

    client.register(
        "x_value", value=None, 
        on_write=on_x_value_changed)

    client.register(
        "y_value", value=None, 
        on_write=on_y_value_changed)

    client.register(
        "z_value", value=None, 
        on_write=on_z_value_changed)

    # start cloud client
    client.start()


if __name__ == "__main__":
    try:
        main()  # main function which runs in an internal infinite loop
    except:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        traceback.print_tb(exc_type, file=print)